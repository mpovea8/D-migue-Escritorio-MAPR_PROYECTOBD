--1.- TR_LOGON_DB
create table TABLA_AUDITORIA_CONEXIONES(
quien VARCHAR2(30),
cuando DATE,
que VARCHAR2(6)
);

CREATE OR REPLACE TRIGGER trg_logon_db
AFTER LOGON ON DATABASE
BEGIN
INSERT INTO TABLA_AUDITORIA_CONEXIONES(quien, cuando, que) 
	VALUES (user,sysdate,'logon');
END;

--2.- TR_LOGOFF_DB
create table TABLA_AUDITORIA_CONEXIONES(
quien VARCHAR2(30),
cuando DATE,
que VARCHAR2(6)
);

CREATE OR REPLACE TRIGGER trg_logoff_db
BEFORE LOGOFF ON DATABASE
BEGIN
INSERT INTO TABLA_AUDITORIA_CONEXIONES(quien, cuando, que) 
	VALUES (user,sysdate,'logoff');
END;


--3.- INS_DEPART
create table TABLA_AUDITORIA_DEPART (
quien VARCHAR2(30),
cuando DATE,
que VARCHAR2(6)
);

CREATE OR REPLACE TRIGGER ins_depart 
BEFORE INSERT ON system.depart
BEGIN
INSERT INTO TABLA_AUDITORIA_CONEXIONES(quien, cuando, que) 
	VALUES (user,sysdate,'insert');
END;


CREATE OR REPLACE TRIGGER ins_depart 
BEFORE INSERT ON system.depart
FOR EACH ROW
BEGIN
INSERT INTO TABLA_AUDITORIA_CONEXIONES(quien, cuando, que) 
	VALUES (user,sysdate,'insert');
END;


--4.- ins_depart_mod
CREATE OR REPLACE TRIGGER ins_depart_mod
BEFORE INSERT OR UPDATE OR DELETE ON system.depart
FOR EACH ROW
BEGIN
IF DELETING THEN
INSERT INTO TABLA_AUDITORIA_DEPART(quien, cuando, que) 
	VALUES (user,sysdate,'delete');
ELSIF INSERTING THEN
INSERT INTO TABLA_AUDITORIA_DEPART(quien, cuando, que) 
	VALUES (user,sysdate,'insert');
ELSIF UPDATING THEN
INSERT INTO TABLA_AUDITORIA_DEPART(quien, cuando, que) 
	VALUES (user,sysdate,'update');
END IF;
END;

 
--5.- ins_empleado
CREATE OR REPLACE TRIGGER ins_empleado 
BEFORE INSERT ON system.emple
FOR EACH ROW
DECLARE
    n_empl number;
BEGIN
SELECT COUNT(*) INTO n_empl FROM SYSTEM.EMPLE E WHERE E.dept_no=:NEW.dept_no;
IF :NEW.dept_no=10 AND n_empl=5 THEN
RAISE_APPLICATION_ERROR(-20001,'El departamento 10 no admite m치s empleados');
ELSIF :NEW.dept_no=20 AND n_empl =10 THEN 
RAISE_APPLICATION_ERROR(-20001,'El departamento 20 no admite m치s empleados');
ELSIF :NEW.dept_no=30 AND n_empl =15 THEN 
RAISE_APPLICATION_ERROR(-20001,'El departamento 30 no admite m치s empleados');
ELSIF :NEW.dept_no=40 AND n_empl =20 THEN 
RAISE_APPLICATION_ERROR(-20001,'El departamento 40 no admite m치s empleados');
END IF;
END;

--6.- auditoria_empleado
create table auditoria_empleado (
emp_no integer PRIMARY KEY,
fecha DATE,
salario_viejo integer,
salario_nuevo integer
);

CREATE OR REPLACE TRIGGER auditoria_empleado 
BEFORE UPDATE OF salario ON system.EMPLE
FOR EACH ROW
WHEN (OLD.salario>NEW.salario)
BEGIN
  INSERT INTO auditoria_empleado (emp_no, fecha, salario_viejo, salario_nuevo ) 
	VALUES (:OLD.emp_no,sysdate,:OLD.salario,:NEW.salario);
END;
